# This file is a template, and might need editing before it works on your project.
# Explanation on the scripts:
# https://gitlab.com/gitlab-examples/kubernetes-deploy/blob/master/README.md
image: registry.gitlab.com/gitlab-examples/kubernetes-deploy

variables:
  # Application deployment domain - Obtain from 
  # Operations>Kubernetes>YourCluster>Base domain
  # Uncomment KUBE_DOMAIN below and add your nip.io domain
  
  # KUBE_DOMAIN: <your kube domain>

stages:
  - build
  - test
#  - doc
  - review
  - staging
  - dast
#  - canary
  - production
  - cleanup

build:
  stage: build
  script:
    - command build
  only:
    - branches

#canary:
#  stage: canary
#  script:
#    - command canary
#  environment:
#    name: prodblue
#    url: http://$CI_PROJECT_PATH_SLUG-prod-blue.$KUBE_DOMAIN
#  when: manual
#  only:
#    - master

blue_50%:
  stage: production
  script:
    - command deploy
  environment:
    name: prodblue
    url: http://$CI_PROJECT_PATH_SLUG-prod-blue.$KUBE_DOMAIN
  when: manual
  only:
    - master
    
#yellow:
  #stage: production
  #script:
   # - echo $CI_ENVIRONMENT_SLUG
   # - echo $KUBE_NAMESPACE
  #environment:
  #  name: sandbox
   # url: https://docs.dev.goromasamu.net
  #when: manual
 # only:
  #  - master    
    

green_50%:
  stage: production
  script:
    - command deploy
  environment:
    name: prodgreen
    url: http://$CI_PROJECT_PATH_SLUG-green.$KUBE_DOMAIN
  when: manual
  only:
    - master

review_app:
  stage: staging
  script:
    - command deploy
  environment:
    name: staging
    url: http://$CI_PROJECT_PATH_SLUG-staging.$KUBE_DOMAIN
  only:
    - master
    
    
#code_quality:
 # stage: review
  #image: docker:stable
  #variables:
   # DOCKER_DRIVER: overlay2
  #allow_failure: true
  #services:
   # - docker:stable-dind
  #script:
   # - export DOCKER_HOST=tcp://localhost:2375
#    - export SP_VERSION=$(echo "$CI_SERVER_VERSION" | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')
 #   - docker run
  #      --env SOURCE_CODE="$PWD"
   #     --volume "$PWD":/code
    #    --volume /var/run/docker.sock:/var/run/docker.sock
    #    "registry.gitlab.com/gitlab-org/security-products/codequality:$SP_VERSION" /code
  #artifacts:
   # reports:
    #  codequality: gl-code-quality-report.json    

    
    
    

review:
  stage: review
  script:
    - command deploy
  environment:
    name: review/$CI_COMMIT_REF_NAME
    url: http://$CI_PROJECT_PATH_SLUG-$CI_ENVIRONMENT_SLUG.$KUBE_DOMAIN
    on_stop: stop_review
  only:
    - branches
  except:
    - master

stop_review:
  stage: cleanup
  variables:
    GIT_STRATEGY: none
  script:
    - command destroy
  environment:
    name: review/$CI_COMMIT_REF_NAME
    action: stop
  when: manual
  allow_failure: true
  only:
    - branches
  except:
    - master

dast:
  stage: dast 
  script:
    - exit 0

#rspec-mysql-unit-test:
#  stage: test
#  script:
#    - exit 0

#rspec-postgres-unit-test:
#  stage: test
#  script:
#    - exit 0
    
code_quality:
  stage: test
  script:
    - exit 0

container_scan:
  stage: test
  script:
    - exit 0

dependancy_scan:
  stage: test
  script:
    - exit 0

license_mgmt:
  stage: test
  script:
    - exit 0

sast:
  image: docker:stable
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  allow_failure: true
  services:
    - docker:stable-dind
  script:
    - export SAST_VERSION=${SP_VERSION:-$(echo "$CI_SERVER_VERSION" | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')}
    - |
      if ! docker info &>/dev/null; then
        if [ -z "$DOCKER_HOST" -a "$KUBERNETES_PORT" ]; then
          export DOCKER_HOST='tcp://localhost:2375'
        fi
      fi
    - | # this is required to avoid undesirable reset of Docker image ENV variables being set on build stage
      function propagate_env_vars() {
        CURRENT_ENV=$(printenv)

        for VAR_NAME; do
          echo $CURRENT_ENV | grep "${VAR_NAME}=" > /dev/null && echo "--env $VAR_NAME "
        done
      }
    - |
      docker run \
        $(propagate_env_vars \
          SAST_BANDIT_EXCLUDED_PATHS \
          SAST_ANALYZER_IMAGES \
          SAST_ANALYZER_IMAGE_PREFIX \
          SAST_ANALYZER_IMAGE_TAG \
          SAST_DEFAULT_ANALYZERS \
          SAST_PULL_ANALYZER_IMAGES \
          SAST_BRAKEMAN_LEVEL \
          SAST_FLAWFINDER_LEVEL \
          SAST_GITLEAKS_ENTROPY_LEVEL \
          SAST_GOSEC_LEVEL \
          SAST_EXCLUDED_PATHS \
          SAST_DOCKER_CLIENT_NEGOTIATION_TIMEOUT \
          SAST_PULL_ANALYZER_IMAGE_TIMEOUT \
          SAST_RUN_ANALYZER_TIMEOUT \
          SAST_JAVA_VERSION \
          ANT_HOME \
          ANT_PATH \
          GRADLE_PATH \
          JAVA_OPTS \
          JAVA_PATH \
          JAVA_8_VERSION \
          JAVA_11_VERSION \
          MAVEN_CLI_OPTS \
          MAVEN_PATH \
          MAVEN_REPO_PATH \
          SBT_PATH \
          FAIL_NEVER \
        ) \
        --volume "$PWD:/code" \
        --volume /var/run/docker.sock:/var/run/docker.sock \
        "registry.gitlab.com/gitlab-org/security-products/sast:$SAST_VERSION" /app/bin/run /code
  artifacts:
    reports:
      sast: gl-sast-report.json