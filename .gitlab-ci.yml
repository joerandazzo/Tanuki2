# This file is a template, and might need editing before it works on your project.
# Explanation on the scripts:
# https://gitlab.com/gitlab-examples/kubernetes-deploy/blob/master/README.md
image: registry.gitlab.com/gitlab-examples/kubernetes-deploy

variables:
  # Application deployment domain
  # KUBE_DOMAIN: domain.example.com

stages:
  - build
  - test
  - doc
  - review
  - scan
  - staging
  - canary
  - production
  - cleanup

build:
  stage: build
  script:
    - command build
  only:
    - branches

canary:
  stage: canary
  script:
    - command canary
  environment:
    name: prodblue
    url: http://$CI_PROJECT_PATH_SLUG-prod-blue.$KUBE_DOMAIN
  when: manual
  only:
    - master

blue:
  stage: production
  script:
    - command deploy
  environment:
    name: prodblue
    url: http://$CI_PROJECT_PATH_SLUG-prod-blue.$KUBE_DOMAIN
  when: manual
  only:
    - master

green:
  stage: production
  script:
    - command deploy
  environment:
    name: prodgreen
    url: http://$CI_PROJECT_PATH_SLUG-green.$KUBE_DOMAIN
  when: manual
  only:
    - master

staging:
  stage: staging
  script:
    - command deploy
  environment:
    name: staging
    url: http://$CI_PROJECT_PATH_SLUG-staging.$KUBE_DOMAIN
  only:
    - master
    

review:
  stage: review
  script:
    - command deploy
  environment:
    name: review/$CI_COMMIT_REF_NAME
    url: http://$CI_PROJECT_PATH_SLUG-$CI_ENVIRONMENT_SLUG.$KUBE_DOMAIN
    on_stop: stop_review
  only:
    - branches
  except:
    - master
    
container_scanning:
  stage: scan
  image: docker:stable
  variables:
    DOCKER_DRIVER: overlay2
    ## Define two new variables based on GitLab's CI/CD predefined variables
    ## https://docs.gitlab.com/ee/ci/variables/#predefined-variables-environment-variables
    CI_APPLICATION_REPOSITORY: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG
    CI_APPLICATION_TAG: $CI_COMMIT_SHA
  allow_failure: true
  services:
    - docker:stable-dind
  script:
    - export DOCKER_HOST=tcp://localhost:2375
    - docker run -d --name db arminc/clair-db:latest
    - docker run -p 6060:6060 --link db:postgres -d --name clair --restart on-failure arminc/clair-local-scan:v2.0.1
    - apk add -U wget ca-certificates
    - docker pull ${CI_APPLICATION_REPOSITORY}:${CI_APPLICATION_TAG}
    - wget https://github.com/arminc/clair-scanner/releases/download/v8/clair-scanner_linux_amd64
    - mv clair-scanner_linux_amd64 clair-scanner
    - chmod +x clair-scanner
    - touch clair-whitelist.yml
    - while( ! wget -q -O /dev/null http://docker:6060/v1/namespaces ) ; do sleep 1 ; done
    - retries=0
    - echo "Waiting for clair daemon to start"
    - while( ! wget -T 10 -q -O /dev/null http://docker:6060/v1/namespaces ) ; do sleep 1 ; echo -n "." ; if [ $retries -eq 10 ] ; then echo " Timeout, aborting." ; exit 1 ; fi ; retries=$(($retries+1)) ; done
    - ./clair-scanner -c http://docker:6060 --ip $(hostname -i) -r gl-container-scanning-report.json -l clair.log -w clair-whitelist.yml ${CI_APPLICATION_REPOSITORY}:${CI_APPLICATION_TAG} || true
  artifacts:
    reports:
      container_scanning: gl-container-scanning-report.json

stop_review:
  stage: cleanup
  variables:
    GIT_STRATEGY: none
  script:
    - command destroy
  environment:
    name: review/$CI_COMMIT_REF_NAME
    action: stop
  when: manual
  allow_failure: true
  only:
    - branches
  except:
    - master

sast:
  stage: test 
  script:
    - exit 0

rspec-mysql-unit-test:
  stage: test
  script:
    - exit 0

rspec-postgres-unit-test:
  stage: test
  script:
    - exit 0
    
coveralls-integration-test:
  stage: test
  script:
    - exit 0

simplecov-code-coverage:
  stage: test
  script:
    - exit 0

cucumber-mysql-acceptance-test:
  stage: test
  script:
    - exit 0

cucumber-postgres-acceptance-test:
  stage: test
  script:
    - exit 0

rubocop-static-analysis-test:
  stage: test
  script:
    - exit 0

tanuki-docs:
  stage: doc
  script:
    - exit 0